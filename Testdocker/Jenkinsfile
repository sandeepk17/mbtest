properties([
    parameters([
        //[$class: 'ChoiceParameter', 
        //    choiceType: 'PT_SINGLE_SELECT', 
        //    description: 'Select the Env Name from the Dropdown List', 
        //    filterLength: 1, 
        //    filterable: true, 
        //    name: 'Env',
        //    randomName: 'choice-parameter-5631314439613788',
        //    script: [
        //        $class: 'GroovyScript', 
        //        fallbackScript: [
        //            classpath: [], 
        //            sandbox: false, 
        //            script: 
        //                'return[\'Could not get Env\']'
        //        ], 
        //        script: [
        //            classpath: [], 
        //            sandbox: false, 
        //            script: 
        //                'return["DEV","QA","Stage","Prod","VAL2:selected"]'
        //        ]
        //    ]
        //],
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Env', 
            randomName: 'choice-parameter-5631314439613978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","QA","Stage","Prod"]'
                ]
            ]
        ], 
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_MULTI_SELECT', 
            description: 'Select the Env Name from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Multi', 
            randomName: 'choice-parameter-56313113978', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Dev","QA","Stage","Prod"]'
                ]
            ]
        ], 
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the TestSuit from the Dropdown List', 
            filterLength: 1, 
            filterable: true, 
            name: 'Test',
            randomName: 'choice-parameter-5631314439613988', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Env\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["ALL:selected",\
                                "T-1", \
                                "T-2", \
                                "T-3", \
                                "T-4", \
                                "T-5"]'
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_CHECKBOX', 
            description: 'Select Servers', 
            filterLength: 1, 
            filterable: true, 
            name: 'Server', 
            randomName: 'choice-parameter-5631314456178619', 
            referencedParameters: 'Env', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get Environment from Env Param\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        ''' if (Env.equals("Dev")){
                                return["devaaa001","devaaa002","devbbb001","devbbb002","devccc001","devccc002"]
                            }
                            else if(Env.equals("QA")){
                                return["qaaaa001","qabbb002","qaccc003"]
                            }
                            else if(Env.equals("Stage")){
                                return["staaa001","stbbb002","stccc003"]
                            }
                            else if(Env.equals("Prod")){
                                return["praaa001","prbbb002","prccc003"]
                            }
                        '''
                ]
            ]
        ]
    ])
])
pipeline {
    environment {
         vari = ""
    }

    agent {
        docker {
            image 'docker:latest'
            args '-v $HOME/:/root/'
        }
    }
    stage('Build'){
        agent{
            docker {
                image 'smartbear/ready-api-soapui-testrunner:latest'
                args '-v $HOME:/root -v="ReportFolder":/reports -v="ExtensionsFolder":/ext --entrypoint=\'\''
            }
        }
        steps {
            script{
                echo 'Hello'
                echo "${params.Env}"
                echo "${params.Test}"
                echo "${params.Server}"
                echo "${params.Multi'}"
                if (params.Server.equals("Could not get Environment from Env Param")) {
                  echo "Must be the first build after Pipeline deployment.  Aborting the build"
                  currentBuild.result = 'ABORTED'
                  return
                }
                echo "Crossed param validation"
            } 
        }
    }
    stage ("Test") {
        steps {
            script{
                echo 'Hello'
            }
        }
    }
}